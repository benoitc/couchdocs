#! /usr/bin/env python

import subprocess as sp
import sys

try:
    import simplejson as json
except ImportError:
    import json

def pretty_json(data):
    info = json.loads(data)
    return json.dumps(info, indent=2, sort_keys=True)

def pretty_xmlish(data):
    command = ['tidy', '-qi', '-wrap', '70', '-utf8']
    try:
        pipe = sp.Popen(command, stdin=sp.PIPE, stdout=sp.PIPE, stderr=sp.PIPE)
        (stdout, stderr) = pipe.communicate(data)
        return stdout
    except:
        return data

pretties = {
    "text/html": pretty_xmlish,
    "application/json": pretty_json,
    "text/plain": pretty_json
}

def parse_comm(lines):
    req = []
    resp = []
    ret = lambda data: data
    for line in lines:
        if line[:1] == ">":
            req.append(line)
        elif line[:1] == "<":
            resp.append(line)
            if line.find("Content-Type") >= 0:
                ctype = line.split(":", 1)[1].strip()
                if ctype.find(";") >= 0:
                    ctype = ctype.split(";", 1)[0].strip()
                ret = pretties.get(ctype, ret)
    print '\n'.join(req + resp)
    return ret

# Based on stdlib's commands.py mkarg function.
def mkarg(x):
    spaces = ' \t\n\r'
    quotable = '\'\"' + spaces
    if not any(map(lambda c: c in quotable, x)):
        return x
    ret = []
    i = 0
    while i < len(x):
        if x[i] == "\\":
            ret.extend(x[i:i+2])
            i += 2
        elif x[i] in spaces:
            ret.append(x[i])
            i += 1
        elif x[i] in quotable:
            ret.append('\\')
            ret.append(x[i])
            i += 1
        else:
            ret.append(x[i])
            i += 1
    return "'%s'" % ''.join(ret)

def main():
    command = ['curl', '-vs'] + sys.argv[1:]
    print " ".join(['$ curl'] + map(mkarg, command[1:]))
    pipe = sp.Popen(command, stdout=sp.PIPE, stderr=sp.PIPE)
    (stdout, stderr) = pipe.communicate()
    if pipe.wait() != 0:
        print stderr
        exit(-1)
    prettify = parse_comm(stderr.splitlines())
    print prettify(stdout)

if __name__ == '__main__':
    main()
